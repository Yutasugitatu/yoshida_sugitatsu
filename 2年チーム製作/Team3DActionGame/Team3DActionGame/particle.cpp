//******************************************************************************
// パーティクル[particle.cpp]
// Author : 管原　司
//******************************************************************************

//******************************************************************************
// インクルードファイル
//******************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "billboard.h"
#include "particle.h"
//******************************************************************************
// マクロ定義
//******************************************************************************
#define TEX_1	("data/texture/effect/particle001.png")
#define TEX_2	("data/texture/effect/particle002.png")
#define TEX_3	("data/texture/effect/particle003.png")
#define MIN_UV	(0.0f)	// UV最小値
#define MAX_UV	(1.0f)	// UV最大値
//******************************************************************************
//静的メンバ変数宣言
//******************************************************************************
LPDIRECT3DTEXTURE9 CParticle::m_apTexture[TEX_TYPE_MAX] = {};
//******************************************************************************
// コンストラクタ
//******************************************************************************
CParticle::CParticle()
{
}
//******************************************************************************
// デストラクタ
//******************************************************************************
CParticle::~CParticle()
{
}
//******************************************************************************
// テクスチャの読み込み
//******************************************************************************
HRESULT CParticle::Load(void)
{
	// レンダラー取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャ読み込み
	D3DXCreateTextureFromFile(pDevice, TEX_1, &m_apTexture[TEX_TYPE_1]);
	D3DXCreateTextureFromFile(pDevice, TEX_2, &m_apTexture[TEX_TYPE_2]);
	D3DXCreateTextureFromFile(pDevice, TEX_3, &m_apTexture[TEX_TYPE_3]);
	return S_OK;
}

//******************************************************************************
// テクスチャの破棄
//******************************************************************************
void CParticle::Unload(void)
{
	// 3回繰り返す
	for (int nCnt = INIT_INT; nCnt < TEX_TYPE_MAX; nCnt++)
	{
		// テクスチャの破棄
		if (m_apTexture[nCnt] != NULL)
		{
			// テクスチャRelease
			m_apTexture[nCnt]->Release();

			// m_pTextureをNULLに
			m_apTexture[nCnt] = NULL;
		}
	}
}

//******************************************************************************
// 初期化
//******************************************************************************
HRESULT CParticle::Init(void)
{
	// 初期化
	CBillboard::Init();

	return S_OK;
}

//******************************************************************************
// 終了
//******************************************************************************
void CParticle::Uninit(void)
{
	// 終了
	CBillboard::Uninit();
}

//******************************************************************************
// 更新
//******************************************************************************
void CParticle::Update(void)
{
	// 更新
	CBillboard::Update();
}

//******************************************************************************
// 描画
//******************************************************************************
void CParticle::Draw(void)
{
	// 描画
	CBillboard::Draw();
}
//******************************************************************************
// 情報設定
//******************************************************************************
void CParticle::SetParticle(D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXVECTOR3 rot, D3DXCOLOR col, TEX_TYPE TexType)
{
	// 位置設定
	SetPosition(pos);

	// サイズ設定
	SetSize(size);

	// 向き設定
	SetRotation(rot);

	// 色設定
	SetColor(col);

	// テクスチャタイプ設定
	m_TexType = TexType;

	// テクスチャ受け渡し
	BindTexture(m_apTexture[m_TexType]);
}