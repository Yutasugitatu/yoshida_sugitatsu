//=============================================================================
//
// リザルト背景 [bg_result.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "mode_game.h"
#include "renderer.h"
#include "scene2d.h"
#include "bg_result.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE ("Data/Texture/ResultBG.png")										//テクスチャ
#define SIZE (D3DXVECTOR3(SCREEN_WIDTH,SCREEN_HEIGHT,0.0f))							//サイズ
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2,SCREEN_HEIGHT / 2,0.0f))				//位置
#define COLOR (D3DXCOLOR(1.0f,1.0f,1.0f,1.0f))										//色
#define FLAME (0)																	//フレーム

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CResultBG::m_pTexture = NULL;	//テクスチャへのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CResultBG::CResultBG()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CResultBG::~CResultBG()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CResultBG::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE,						// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CResultBG::TextureUnload(void)
{
	//もしテクスチャがNULLじゃない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CResultBG * CResultBG::Create(void)
{
	//リザルト背景のポインタ
	CResultBG * pResultBG = NULL;
	//もしリザルト背景のポインタがNULLの場合
	if (pResultBG == NULL)
	{
		//リザルト背景のメモリ確保
		pResultBG = new CResultBG;
		//もしリザルト背景がNULLじゃない場合
		if (pResultBG != NULL)
		{
			//初期化処理関数呼び出し
			pResultBG->Init();
			//位置を設定する
			pResultBG->SetPosition(POSITION);
			//サイズを設定する
			pResultBG->SetSize(SIZE);
			//色を設定する
			pResultBG->SetColor(COLOR);
		}
	}
	//リザルト背景のポインタを返す
	return pResultBG;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CResultBG::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//シーン2Dの初期化処理関数呼び出し
	CScene2d::Init();
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CResultBG::Uninit(void)
{
	//シーン2Dの終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CResultBG::Update(void)
{
	//シーン2Dの更新処理関数呼び出し
	CScene2d::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CResultBG::Draw(void)
{
	//シーン2Dの描画処理関数呼び出し
	CScene2d::Draw();
}
